#
#
#
#
#

--公用表表达式(cte)
with tt as (select * from emp)
select * from tt;
注意事项：
cte之后必须紧跟使用cte的SQL语句(select,insert,update),否则cte将失效。
cte之后可跟多个cte，使用逗号隔开。
如果cte表达式的名称与表或视图的名称相同，使用时，仍然使用的是cte。
cte可以引用自身。

select * from emp where empname in (select deptno from dept where deptname = 'LOS');
改写成：
with tt as 
(select deptno from dept where deptname = 'Los')
select * from emp where empno in (select * from tt)



with递归语法：
WITH 
1  query_name ([c_alias [, c_alias]...]) --这是子查询的名称，必须在括号中把这个子查询的所有列名写出来。
2  AS (subquery) 
--AS后面的subquery就是查询语句，递归部分就写在这里。subquery部分由两个成员组成：anchor member(锚点成员) 和 recursive member(递归成员)。
  它们之间必须用union all联合起来，anchor member 必须写在recursive member前面。
  anchor member用来定位递归的入口，锚点成员是一个SELECT语句，它不可以包含自身名称(query_name)。
  这相当于CONNECT BY查询中的START WITH，典型写法就是:
  SELECT ... FROM 要遍历的表 WHERE ... (起始条件)
3  [search_clause] --遍历顺序子句，可以指定深度优先或广度优先遍历顺序。
4  [cycle_clause] --循环子句，用于中止遍历中出现的死循环。
5  [,query_name ([c_alias [, c_alias]...]) AS (subquery) [search_clause] [cycle_clause]]...  --如果还有其他递归子查询，定义同上。




--列子
--递归写法必须把所有列都列出来
with emps (empno, ename)  
as (  
  select empno, ename 
  from emp  
  where mgr is null  
  union all  
  select emp.empno,emps.ename||'/'||emp.ename   
  from emp, emps 
  where emp.mgr=emps.empno 
)  
select * from emps;

     EMPNO ENAME
---------- ----------------------------------------------------------------
      7839 KING
      7566 KING/JONES
      7698 KING/BLAKE
      7782 KING/CLARK
      7499 KING/BLAKE/ALLEN
      7521 KING/BLAKE/WARD
      7654 KING/BLAKE/MARTIN
      7788 KING/JONES/SCOTT
      7844 KING/BLAKE/TURNER
      7900 KING/BLAKE/JAMES
      7902 KING/JONES/FORD
      7934 KING/CLARK/MILLER
      7369 KING/JONES/FORD/SMITH
      7876 KING/JONES/SCOTT/ADAMS
      
--等同于
select empno,sys_connect_by_path(ename,'/') p_name from emp start with mgr is null connect by prior empno = mgr; 
     EMPNO P_NAME
---------- ------------------------------------------------------------
      7839 /KING
      7566 /KING/JONES
      7788 /KING/JONES/SCOTT
      7876 /KING/JONES/SCOTT/ADAMS
      7902 /KING/JONES/FORD
      7369 /KING/JONES/FORD/SMITH
      7698 /KING/BLAKE
      7499 /KING/BLAKE/ALLEN
      7521 /KING/BLAKE/WARD
      7654 /KING/BLAKE/MARTIN
      7844 /KING/BLAKE/TURNER
      7900 /KING/BLAKE/JAMES
      7782 /KING/CLARK
      7934 /KING/CLARK/MILLER

关于connect by
当使用connect by 有where条件时，where条件的作用在connect by 之后过滤。start with指定树的根。
connect 逻辑读比with小，性能好，但是connect不是ansi sql。

构造一个等差数列：
select rownum,rownum*2 rn from dual connect by rownum<10;
使用with构造等差数列：
with t (tid,trn) as
(select 1 id,2 rn from dual 
 union all
 select tid+1,trn+2 from t where t.tid<10 --注意返回行数
 )
 select * from t;
        TID        TRN
---------- ----------
         1          2
         2          4
         3          6
         4          8
         5         10
         6         12
         7         14
         8         16
         9         18
        10         20

斐波那契数列：
with t (id,last_t,t)
as
(select 1,1,1 from dual
 union all
 select id+1,t,last_t+t from t where t.id<10)
select * from t ;

http://www.jb51.net/article/105760.htm
