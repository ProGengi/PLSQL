#
#
#
#
#

集合的类型
1.关联数组
 declare
  type list_of_name is table of person.first_name%type index by pls_integer;
  happyfamily list_of_name;
  l_low pls_integer;
 begin 
  happyfamily(20202020):='edward';
  happyfamily(0):='james';
  happyfamily(-20):='harden';
  happyfamily(234):='curry';
  --在关联数组中下标的值是可以任意取的。
  l_low := happyfamily.first; --调用first方法，取集合第一个值
  
  while(l_low is not null)
   loop
    dbms_output.put_line(happyfamily(l_low));
    l_row := happyfamily.next;--调用next方法取集合下一个值，从当前有意义的行调到下一个有定义的行。
   end loop;
 end;
 
 
 输出的结果是
   harden
   james
   curry
   edward
  --因为该集合有索引值，索引集合结果按照索引排序。 
2.嵌套表
  declare 
   type list_of_name is table of varchar2(100);
   happyfamily list_of_name :=list_of_name(); --调用初始化函数初始化嵌套表
   children list_of_name :=list_of_name();
   parents list_of_name :=list_of_name();
  begin
   happyfamily.extend(4);--调用extend方法，请求空间，如果不加参数表明申请一行，加参数表明申请n行。
   happyfamily(1):='harden'; --把值填充到集合中
   happyfamily(2):='james';
   happyfamily(3):='curry';
   happyfamily(4):='love';
   
   children.extend
   children(1):='james';
   childten.extend
   children(2):='curry';
   
   parents :=happyfamily multiset except children; --当数据库使用集合操作时，自动扩展集合空间，不必申请。
   
   for l_row in parents.first .. parents.last loop --对于一个紧凑的集合可以使用该方法，如果对一个稀疏的集合使用该方法会报no_data_found。
    dbms_output.put_line(parents.(l_row));
   end loop;
  end;
  
  --结果是
    harden
    love
3.varry
  将varry类型作为关系表的一列。
  sql> create type first_name is varrry(2) of varchar2(100); --在定义varry时，必须指定varry的长度
  sql> create type last_name is varry(1) of varchar2(100);
  sql> create table family
       (surname varchar2(100),
        parent_name first_name,
        children_name last_name)
   
   declare 
    parent first_name :=first_name();
    children last_name :=last_name();
   begin
    parent.extend(2);
    parent(1):='harden';
    parent(2):='curry';
    --假如varry只定义了2个，extend却指定3时，会报下标超过限制的错。
    
    children.extend;
    children(1):='james';
    
    insert into family values('liber',parent,children);
   end;
   
   sql>select * from family
    liber first_name('harden','curry') last_name('james')
    
三种集合之间的区别
要在数据库表中使用时，不能使用关联数组。
关联数组时稀疏的，而嵌套表与varry是密集的。关联数组也是唯一一个可以用负数下标的集合。
嵌套表可以使用集合操作，关联数组不可以。
如果想要限制数组能够保存的行数，只能是varry。
如果想保存插入的顺序可以使用varry。
嵌套表一开始是密集的，但是因为可以删除元素，所以有可能变成稀疏的。
嵌套表与varry需要通过构造函数初始化，而关联数组自动初始化。
只有嵌套表可以比较两个集合是否相等。

集合的方法
count 返回集合中现有的元素数量
  把count应用于一个已经初始化的但没有任何元素的集合时，返回0.用于空的关联数组时也是返回0.但是用于没有初始化的嵌套表或者varry时会报collection_is_null异常
delete 从集合中移除一个或者多个元素，对于varry只能删除所有元素
  不带参数表明删除所有元素。delete(i)表明删除下标为i的元素。delete(i,j)删除下标从i到j的元素，包括i跟j。
  当delete用于varry时，只能使用不带下标的delete也就是全部删除。因为varry始终时密集的，所以不能删除中间的元素，但是可以使用trim来删除末尾的元素。
  当一个嵌套表只存在1,2,3但是调用delete(-5,1)时只会删除1位置的元素，不会报错。
exists 根据某个指定的元素看是否已经存在于集合中，存在返回true
  if name.exists('james') then
    ..
extend 增加嵌套表或者varry元素的个数
  extend(n,i) 增加n个元素，每个元素的值与第i个元素的值一样。
first,last 返回可用的最大和最小的
   for indx in name.first..name.last loop
      ...
   end loop;   
  只有紧凑的集合才能使用这方法去遍历
limit 返回varry中允许的最大的元素数量
prior,next 返回紧挨着指定下标之前或者之后的下标值。应该用piror和next来遍历集合，尤其是稀疏的关联数组。
trim 从集合的尾部删除元素
  不带参数只删除一个元素。不能对关联数组使用trim，因为它是稀疏的。如果trim的数量超过集合中实际存在的数量会报subscript_beyond_count异常。
  




